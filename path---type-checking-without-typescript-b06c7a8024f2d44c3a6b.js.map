{"version":3,"sources":["webpack:///path---type-checking-without-typescript-b06c7a8024f2d44c3a6b.js","webpack:///./.cache/json/type-checking-without-typescript.json"],"names":["webpackJsonp","414","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","pathContext","slug","previous","fields","next"],"mappings":"AAAAA,cAAc,gBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,eAAAC,OAAA,iBAAgDC,gBAAmBC,GAAA,uIAAAC,KAAA,uxIAAskIC,aAA2eL,MAAA,wDAAAM,KAAA,wBAA8FC,aAAgBC,KAAA,qCAAAC,UAAwDC,QAAUF,KAAA,iCAAuCH,aAAgBL,MAAA,wCAA+CW,MAASD,QAAUF,KAAA,mCAAyCH,aAAgBL,MAAA","file":"path---type-checking-without-typescript-b06c7a8024f2d44c3a6b.js","sourcesContent":["webpackJsonp([3763636152902],{\n\n/***/ 414:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Bryce's Blog\",\"author\":\"Bryce Dooley\"}},\"markdownRemark\":{\"id\":\"/Users/brycedooley/Documents/blog/gatsby-blog/src/pages/type-checking-without-typescript/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>TypeScript offers amazing benefits, but at the cost of requiring additional compilation steps, and learning a new syntax. </p>\\n<p>Thankfully, VSCode gives you the ability to add type checking without needing to bring TypeScript into your project. Instead it utilizes something that you may already be using in your codebase — <a href=\\\"https://jsdoc.app/index.html\\\">JSDoc</a>!</p>\\n<p>First, you’ll need to add this snippet into your VSCode settings:\\n<code class=\\\"language-text\\\">&quot;javascript.implicitProjectConfig.checkJs&quot;: true</code></p>\\n<p>Now, if you add JSDoc strings to any of your code, VSCode will use the type definitions to verify you are using the correct types, and if not display helpful error messages.</p>\\n<h2>Type checking params</h2>\\n<p>Here is a basic example of using a JSDoc definition for function params:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">/**\\n * @param {Number} a \\n * @param {Number} b \\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> a <span class=\\\"token operator\\\">+</span> b<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>If we try to running the following function we will get an error message from VSCode:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'2'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// Argument of type '\\\"2\\\"' is not assignable to parameter of type 'number'.</span></code></pre>\\n      </div>\\n<h2>Creating reusable types</h2>\\n<p>One useful tool is JSDoc’s <code class=\\\"language-text\\\">@typedef</code> which allows you to create reusable types that can be used across your codebase. Here is a simple example:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">/**\\n * @typedef {Number[]} NumberArray\\n */</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * @param {NumberArray} list \\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">addList</span><span class=\\\"token punctuation\\\">(</span>list<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> list<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>total<span class=\\\"token punctuation\\\">,</span> num<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> total <span class=\\\"token operator\\\">+</span> num<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">addList</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// Argument of type '\\\"a\\\"' is not assignable to parameter of type 'number[]'.</span>\\n<span class=\\\"token function\\\">addList</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// Type 'string' is not assignable to type 'number'.</span></code></pre>\\n      </div>\\n<p>While this doesn’t give you the full power of TypeScript, it does enable you to use one of its most useful features. Check out the <a href=\\\"https://jsdoc.app/index.html\\\">JSDoc</a> documentation for more examples of type definitions. </p>\\n<p>If you have other ideas or thoughts <a href=\\\"https://twitter.com/BryceDooley\\\">let me know!</a></p>\",\"frontmatter\":{\"title\":\"Type checking JavaScript in VSCode without TypeScript\",\"date\":\"September 14, 2019\"}}},\"pathContext\":{\"slug\":\"/type-checking-without-typescript/\",\"previous\":{\"fields\":{\"slug\":\"/creating-useObservable-hook/\"},\"frontmatter\":{\"title\":\"Creating a useObservable React Hook\"}},\"next\":{\"fields\":{\"slug\":\"/developer-productivity-habits/\"},\"frontmatter\":{\"title\":\"Productivity habits for software developers\"}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---type-checking-without-typescript-b06c7a8024f2d44c3a6b.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Bryce's Blog\",\"author\":\"Bryce Dooley\"}},\"markdownRemark\":{\"id\":\"/Users/brycedooley/Documents/blog/gatsby-blog/src/pages/type-checking-without-typescript/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>TypeScript offers amazing benefits, but at the cost of requiring additional compilation steps, and learning a new syntax. </p>\\n<p>Thankfully, VSCode gives you the ability to add type checking without needing to bring TypeScript into your project. Instead it utilizes something that you may already be using in your codebase — <a href=\\\"https://jsdoc.app/index.html\\\">JSDoc</a>!</p>\\n<p>First, you’ll need to add this snippet into your VSCode settings:\\n<code class=\\\"language-text\\\">&quot;javascript.implicitProjectConfig.checkJs&quot;: true</code></p>\\n<p>Now, if you add JSDoc strings to any of your code, VSCode will use the type definitions to verify you are using the correct types, and if not display helpful error messages.</p>\\n<h2>Type checking params</h2>\\n<p>Here is a basic example of using a JSDoc definition for function params:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">/**\\n * @param {Number} a \\n * @param {Number} b \\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> a <span class=\\\"token operator\\\">+</span> b<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>If we try to running the following function we will get an error message from VSCode:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'2'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// Argument of type '\\\"2\\\"' is not assignable to parameter of type 'number'.</span></code></pre>\\n      </div>\\n<h2>Creating reusable types</h2>\\n<p>One useful tool is JSDoc’s <code class=\\\"language-text\\\">@typedef</code> which allows you to create reusable types that can be used across your codebase. Here is a simple example:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">/**\\n * @typedef {Number[]} NumberArray\\n */</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * @param {NumberArray} list \\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">addList</span><span class=\\\"token punctuation\\\">(</span>list<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> list<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>total<span class=\\\"token punctuation\\\">,</span> num<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> total <span class=\\\"token operator\\\">+</span> num<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">addList</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// Argument of type '\\\"a\\\"' is not assignable to parameter of type 'number[]'.</span>\\n<span class=\\\"token function\\\">addList</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// Type 'string' is not assignable to type 'number'.</span></code></pre>\\n      </div>\\n<p>While this doesn’t give you the full power of TypeScript, it does enable you to use one of its most useful features. Check out the <a href=\\\"https://jsdoc.app/index.html\\\">JSDoc</a> documentation for more examples of type definitions. </p>\\n<p>If you have other ideas or thoughts <a href=\\\"https://twitter.com/BryceDooley\\\">let me know!</a></p>\",\"frontmatter\":{\"title\":\"Type checking JavaScript in VSCode without TypeScript\",\"date\":\"September 14, 2019\"}}},\"pathContext\":{\"slug\":\"/type-checking-without-typescript/\",\"previous\":{\"fields\":{\"slug\":\"/creating-useObservable-hook/\"},\"frontmatter\":{\"title\":\"Creating a useObservable React Hook\"}},\"next\":{\"fields\":{\"slug\":\"/developer-productivity-habits/\"},\"frontmatter\":{\"title\":\"Productivity habits for software developers\"}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/type-checking-without-typescript.json\n// module id = 414\n// module chunks = 3763636152902"],"sourceRoot":""}