{
  "posts":
  [
    {
      "title": "A 3-step framework for solving problems with recursion",
      "category": "programming",
      "teaser": "<p>Recursion: when a function invokes itself. Sounds simple, right? Well for many, writing recursive algorithms can be an unintuitive and frustrating process....</p>",
      "content": "<section name=\"7ace\" class=\"section section--body section--first section--last\"><div class=\"section-content\"><div class=\"section-inner sectionLayout--insetColumn\"><img class=\"progressiveMedia-image js-progressiveMedia-image\" data-src=\"https://cdn-images-1.medium.com/max/800/1*BXAjSzcFqit-K25vQ2crWA.jpeg\" src=\"https://cdn-images-1.medium.com/max/800/1*BXAjSzcFqit-K25vQ2crWA.jpeg\"><p class=\"blockquote\" name=\"431c\" id=\"431c\" class=\"graf graf--pullquote graf--startsWithDoubleQuote graf-after--figure\">“People often joke that in order to understand recursion, you must first understand recursion.”&#8202;—&#8202;John D.&nbsp;Cook</p><p name=\"de7b\" id=\"de7b\" class=\"graf graf--p graf-after--pullquote\">Recursion: when a function invokes itself. Sounds simple, right? Well for many, writing recursive algorithms can be an unintuitive and frustrating process.</p><p name=\"ec2b\" id=\"ec2b\" class=\"graf graf--p graf-after--p\">This blog post will present a simple framework that aims to help developers think about, and write, recursive algorithms.</p><p name=\"5e26\" id=\"5e26\" class=\"graf graf--p graf-after--p\">I’ll use a simple example problem to demonstrate the process:</p><p name=\"dac4\" id=\"dac4\" class=\"graf graf--p graf-after--p\"><em class=\"markup--em markup--p-em\">A shopper with a pocket full of quarters, dimes and nickels needs to decide how they’ll pay for a 25 cent pack of gum. Write an algorithm using recursion that will return every possible permutation of change, in every possible order, the customer can give the cashier.</em></p><p name=\"61f4\" id=\"61f4\" class=\"graf graf--p graf-after--p\">Our output will be an array of all possible permutations. Example:</p><pre name=\"1205\" id=\"1205\" class=\"graf graf--pre graf-after--p\"><code class=\"markup--code markup--pre-code\">[[.25], [.10, .10, .05], [.10, .05, .10], [.10, .05, .05, .05], ...]</code></pre><h2 name=\"84a3\" id=\"84a3\" class=\"graf graf--h2 graf-after--pre\"><strong class=\"markup--strong markup--h2-strong\">Step 1: establish your base&nbsp;case</strong></h2><p name=\"2a13\" id=\"2a13\" class=\"graf graf--p graf-after--h2\">To start, you’ll need to document your base case(s); or in other words the scenario(s) where your recursive function should <strong class=\"markup--strong markup--p-strong\">stop</strong>. Every base case should follow this general format:</p><pre name=\"c34b\" id=\"c34b\" class=\"graf graf--pre graf-after--p\">If &lt;some condition&gt; is true, end the function and &lt;do something that get's you closer to your result&gt;.</pre><p name=\"695d\" id=\"695d\" class=\"graf graf--p graf-after--pre\">Below are the base cases I’ve come up with for this problem:</p><pre name=\"de1d\" id=\"de1d\" class=\"graf graf--pre graf-after--p\">1) If the total amount of change equals .25, end the function and return the list of coins used.</pre><pre name=\"7596\" id=\"7596\" class=\"graf graf--pre graf-after--pre\">2) If the total amount is greater than .25, end the function since that combination is invalid.</pre><h2 name=\"61e1\" id=\"61e1\" class=\"graf graf--h2 graf-after--pre\"><strong class=\"markup--strong markup--h2-strong\">Step 2: draw the solution in the shape of a&nbsp;tree</strong></h2><p name=\"5198\" id=\"5198\" class=\"graf graf--p graf-after--h2\">Recursive functions are best visualized as trees. Each ‘branch’ represents a new invocation of the recursive function, which should get you closer to your end result.</p><p name=\"8d3e\" id=\"8d3e\" class=\"graf graf--p graf-after--p\">Below is an example of the tree we would draw to solve our current problem. We start with our three coin options at the top (.25,&nbsp;.10,&nbsp;.05) and build out branches for each to gradually create each unique permutation.</p><p name=\"8a22\" id=\"8a22\" class=\"graf graf--p graf-after--p\"><strong class=\"markup--strong markup--p-strong\">NOTE</strong>: I only included the branches for&nbsp;.10 in this tree (due to both space and laziness constraints)&#8202;—&#8202;however one branch is usually all you’ll need for step 3.</p><img src=\"https://cdn-images-1.medium.com/max/800/1*BNW5RlhZ6MpFL7_-eatxHA.jpeg\" crossorigin=\"anonymous\" class=\"progressiveMedia-thumbnail js-progressiveMedia-thumbnail\"\"><h2 name=\"fb3a\" id=\"fb3a\" class=\"graf graf--h2 graf-after--figure\"><strong class=\"markup--strong markup--h2-strong\">Step 3: establish your recursive case</strong></h2><p name=\"1567\" id=\"1567\" class=\"graf graf--p graf-after--h2\">Here we’ll document our recursive case; or in other words what the program should do while traversing each branch of the tree. The key to this step is coming up with a <strong class=\"markup--strong markup--p-strong\">single set of logic</strong> that can be applied to each branch.</p><p name=\"76e6\" id=\"76e6\" class=\"graf graf--p graf-after--p\">Once I have an idea, I’ll typically start at the top of my tree and verbalize what will happen when that logic is applied at each branch using some sample inputs. Once I’ve confirmed the logic will work at each branch I have my recursive case!</p><p name=\"09e7\" id=\"09e7\" class=\"graf graf--p graf-after--p\">This would be the logic for our example:</p><pre name=\"bbd2\" id=\"bbd2\" class=\"graf graf--pre graf-after--p\">At each branch, take the current list of coins used and separately add each of the three coin types to that list. Also calculate the new total (so it can eventually be evaluated by the base case).</pre><pre name=\"ef92\" id=\"ef92\" class=\"graf graf--pre graf-after--pre\">A new branch (meaning a new recursive function invocation) will be created for each new combination.</pre><pre name=\"a902\" id=\"a902\" class=\"graf graf--pre graf-after--pre\">If the result of the recursive call is not null (per the 2nd base case), add to a permutations array.</pre><p name=\"585d\" id=\"585d\" class=\"graf graf--p graf-after--pre\">Now all that’s left is to turn this into code, which would look something like this:</p><pre name=\"4d18\" id=\"4d18\" class=\"graf graf--pre graf-after--p\"><strong class=\"markup--strong markup--pre-strong\">var coinOptions = [.25, .10, .05];</strong></pre><pre name=\"a74a\" id=\"a74a\" class=\"graf graf--pre graf-after--pre\"><strong class=\"markup--strong markup--pre-strong\">function permutationsTo25Cents(coinOptions, coinsUsed = [], total = 0){<br>  var permutations = [];</strong></pre><pre name=\"5a0c\" id=\"5a0c\" class=\"graf graf--pre graf-after--pre\">//Base cases:</pre><pre name=\"a1e5\" id=\"a1e5\" class=\"graf graf--pre graf-after--pre\">//1) If the total amount of change equals .25, end the function and return the list of coins used.</pre><pre name=\"7b9f\" id=\"7b9f\" class=\"graf graf--pre graf-after--pre\"><strong class=\"markup--strong markup--pre-strong\"> if(total === .25){<br>    return [coinsUsed];<br>  }</strong></pre><pre name=\"e5f6\" id=\"e5f6\" class=\"graf graf--pre graf-after--pre\">//2) If the total amount is greater than .25, end the function since that combination is invalid.</pre><pre name=\"2ada\" id=\"2ada\" class=\"graf graf--pre graf-after--pre\"><strong class=\"markup--strong markup--pre-strong\">if(total &gt;= .25){<br>    return null;<br>  }</strong></pre><pre name=\"5e5b\" id=\"5e5b\" class=\"graf graf--pre graf-after--pre\">//Recursive case:</pre><pre name=\"fb41\" id=\"fb41\" class=\"graf graf--pre graf-after--pre\">//At each branch, take the current list of coins used and separately add each of the three coin types to that list. Also calculate the new total (so it can eventually be evaluated by the base case).</pre><pre name=\"9ca2\" id=\"9ca2\" class=\"graf graf--pre graf-after--pre\"><strong class=\"markup--strong markup--pre-strong\">for(var i = 0; i &lt; coinOptions.length; i++){</strong><br><strong class=\"markup--strong markup--pre-strong\">    let coinsUsedPlusNewCoin = coinsUsed.concat(coinOptions[i]);<br>    let newTotal = total + coinOptions[i];</strong></pre><pre name=\"3ab0\" id=\"3ab0\" class=\"graf graf--pre graf-after--pre\">//A new branch (meaning a new recursive function invocation) will be created for each new combination.</pre><pre name=\"c522\" id=\"c522\" class=\"graf graf--pre graf-after--pre\"><strong class=\"markup--strong markup--pre-strong\">    let thisPerm = permutationsTo25Cents(coinOptions, coinsUsedPlusNewCoin, newTotal);</strong></pre><pre name=\"4590\" id=\"4590\" class=\"graf graf--pre graf-after--pre\">//If the result of the recursive call is not null (per the 2nd base case), add to a permutations array.</pre><pre name=\"180d\" id=\"180d\" class=\"graf graf--pre graf-after--pre\"><strong class=\"markup--strong markup--pre-strong\">if(thisPerm !== null){<br>      permutations = permutations.concat(thisPerm);<br>    }<br>  }</strong></pre><pre name=\"5333\" id=\"5333\" class=\"graf graf--pre graf-after--pre\"><strong class=\"markup--strong markup--pre-strong\">return permutations;<br>}</strong></pre><p name=\"dc5e\" id=\"dc5e\" class=\"graf graf--p graf-after--pre\">That’s it! I hope this framework will be helpful for you as you tackle more complex recursive problems.</p><p name=\"8982\" id=\"8982\" class=\"graf graf--p graf-after--p\"><a href=\"http://codepen.io/brycegit/pen/qrWyjQ\">Here is a codepen of this example if you’d like to try it out.</a></p></div></div></section>"
    },
    {
      "title": "Hello World!",
      "category": "random",
      "teaser": "<p>I&rsquo;ve finally started a blog! For those of you that don&rsquo;t know me, my name is Bryce and I have worked in the digital marketing industry for the last 10(ish) years...</p>",
      "content": "<p>I&rsquo;ve finally started a blog! For those of you that don&rsquo;t know me, my name is Bryce and I have worked in software development for the last 10(ish) years. I&rsquo;ve held several roles, including: Full Stack Software Engineer, Front-End Developer, Email Developer, Scurm Master, and Project/Program Manager. I&rsquo;ve also worked on a few web design/development freelance projects outside of my professional roles.</p><p>I&rsquo;m a productivity nerd, music lover and recent comic book enthusiest. I live in Medford MA with my wife and two <span style='text-decoration: line-through'>children</span> dogs.</p><p>I am currently attending a school called Hack Reactor that focuses on full-stack javascript development, and will be taking on freelance development projects starting May 2017.</p><p>I&rsquo;ll be using this blog to share my thoughts on digital marketing, software engineering, project management and productivity (and other random things).</p>"
    }
  ],
  "contact":
    {
      "content" : "<p style='text-align: center'><a href='mailto:brycehdooley@gmail.com'>brycehdooley@gmail.com</a></p><p style='text-align: center'><a href='http://www.linkedin.com/in/bryce-dooley-pmp-csm'>linkedin.com/in/bryce-dooley-pmp-csm</a></p>"
    }
}
