webpackJsonp([0xca321843f021],{403:function(n,s){n.exports={data:{site:{siteMetadata:{title:"Bryce's Blog",author:"Bryce Dooley"}},markdownRemark:{id:"/Users/brycedooley/Documents/blog/gatsby-blog/src/pages/testing-async-redux-in-jest/index.md absPath of file >>> MarkdownRemark",html:'<p>In this article I’ll outline an approach that has worked well for me when testing React component logic that is tied to async Redux actions.</p>\n<p>An example of this would be a <code class="language-text">&lt;Search /&gt;</code> component that calls a search service and displays results. I’ll use this example in the code below.</p>\n<h2>The Problem</h2>\n<p>When functionality of React components is tied to Redux actions/reducers and api calls, they become a bit harder to test than a standalone component. Ideally you want to test the integration of the component, the Redux ecosystem and the asynchronous api calls (this most closely resembles the end user’s experience). But unless you have a working api some mocking will need to happen.</p>\n<h2>The Solution</h2>\n<p>As I’ll explain below, one solution I’ve found to work well is mocking the Redux actions that trigger async api calls. This allows you to test the interface of the React component without needing an actual api to return results.</p>\n<h2>The Test</h2>\n<p>Here is a basic example of what a <code class="language-text">&lt;Search /&gt;</code> test might look like:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// search-test.js</span>\n\n<span class="token keyword">import</span> setup <span class="token keyword">from</span> <span class="token string">\'./setup\'</span><span class="token punctuation">;</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">\'should send correct search params to api on submit\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> submitButton<span class="token punctuation">,</span> params<span class="token punctuation">,</span> actions <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Let\'s assume the search form already </span>\n  <span class="token comment">// has the search values in place.</span>\n  fireEvent<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span>submitButton<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">expect</span><span class="token punctuation">(</span>actions<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledWith</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<h2>The Setup</h2>\n<p>This file allows you to export the rendered <code class="language-text">&lt;Search /&gt;</code> component integrated with a Redux store, along with mocked Redux actions. While this could live in the test file, I prefer to keep them separate for greater reusability. </p>\n<p>Your actual setup may need to change based on your test lib; I had <a href="https://github.com/testing-library/react-testing-library">React Testing Library</a> in mind when writing this.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// setup.js</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'redux\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-redux\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> render <span class="token keyword">from</span> <span class="token string">\'your-testing-lib\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> actions <span class="token keyword">from</span> <span class="token string">\'../search/actions\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> reducer <span class="token keyword">from</span> <span class="token string">\'../search/reducer\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Search <span class="token keyword">from</span> <span class="token string">\'../search/component\'</span><span class="token punctuation">;</span>\n\njest<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">\'../search/actions\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    search<span class="token punctuation">:</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token comment">// It is common for an action to return a higher order </span>\n      <span class="token comment">// function that exposes "dispatch", especially when</span>\n      <span class="token comment">// using redux-thunk. To keep the tests synchronous</span>\n      <span class="token comment">// we\'ll just return an object.</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        <span class="token comment">// Note: the type string must be entered</span>\n        <span class="token comment">// manually vs importing a constant, due</span>\n        <span class="token comment">// to jest.mock being hoisted</span>\n        type<span class="token punctuation">:</span> <span class="token string">\'SUBMIT_SEARCH\'</span><span class="token punctuation">,</span>\n        payload<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span>somePayload <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  initialState <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>someInitialState <span class="token punctuation">}</span>\n<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> testingLibFns <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>Provider store<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initialState<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>\n      <span class="token operator">&lt;</span>Search <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>testingLibFns<span class="token punctuation">,</span>\n    params<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span>someSearchParams <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    submitButton<span class="token punctuation">:</span> testingLibFns<span class="token punctuation">.</span><span class="token function">getByText</span><span class="token punctuation">(</span><span class="token string">\'Submit\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    actions\n  <span class="token punctuation">}</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>This setup will allow you to test your component and a portion of the Redux integration, without needing to deal with a real api or async code. If you have other ideas or thoughts <a href="https://twitter.com/BryceDooley">let me know!</a></p>',frontmatter:{title:"Testing async React Redux using Jest",date:"August 18, 2019"}}},pathContext:{slug:"/testing-async-redux-in-jest/",previous:{fields:{slug:"/debug-rerenders-using-hooks/"},frontmatter:{title:"How to debug unnecessary rerenders using React Hooks"}},next:null}}}});
//# sourceMappingURL=path---testing-async-redux-in-jest-8965e1dec116f875412a.js.map